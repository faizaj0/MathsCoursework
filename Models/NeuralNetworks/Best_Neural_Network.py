# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17f0j1iCZ4QMSkdbOodCmkpMUrCpq_OFK
"""

import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset, Subset
from sklearn.model_selection import KFold, train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report

# Load and preprocess data
X = np.load('Datasets/kryptonite-15-X.npy')
y = np.load('Datasets/kryptonite-15-y.npy')

# Split the data into training and test sets
X_train_full, X_test, y_train_full, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Convert to PyTorch tensors
X_train_full = torch.tensor(X_train_full, dtype=torch.float32)
y_train_full = torch.tensor(y_train_full, dtype=torch.float32)
X_test = torch.tensor(X_test, dtype=torch.float32)
y_test = torch.tensor(y_test, dtype=torch.float32)

# Define neural network architecture
class NeuralNet(nn.Module):
    def __init__(self, input_dim):
        super(NeuralNet, self).__init__()
        self.layers = nn.Sequential(
            nn.Linear(input_dim, 128),
            nn.ReLU(),
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        return self.layers(x)

# Cross-validation setup
kf = KFold(n_splits=5, shuffle=True, random_state=42)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

def train_model(model, train_loader, val_loader, criterion, optimizer, patience=10):
    best_loss = float('inf')
    epochs_no_improve = 0
    best_model_state = None

    for epoch in range(100):
        model.train()
        for X_batch, y_batch in train_loader:
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)
            optimizer.zero_grad()
            outputs = model(X_batch).squeeze()
            loss = criterion(outputs, y_batch)
            loss.backward()
            optimizer.step()

        # Validation phase (only if val_loader is provided)
        if val_loader is not None:
            model.eval()
            val_loss = 0.0
            with torch.no_grad():
                for X_val, y_val in val_loader:
                    X_val, y_val = X_val.to(device), y_val.to(device)
                    val_outputs = model(X_val).squeeze()
                    val_loss += criterion(val_outputs, y_val).item()

            val_loss /= len(val_loader)

            # Early stopping logic
            if val_loss < best_loss:
                best_loss = val_loss
                best_model_state = model.state_dict()
                epochs_no_improve = 0
            else:
                epochs_no_improve += 1
                if epochs_no_improve >= patience:
                    model.load_state_dict(best_model_state)
                    break
        else:
            # If no validation set, just save the model after the last epoch
            best_model_state = model.state_dict()

    model.load_state_dict(best_model_state)
    return model

print("Starting K-Fold Cross-Validation...\n")
input_dim = X_train_full.shape[1]

# K-fold Cross-validation
for fold, (train_index, val_index) in enumerate(kf.split(X_train_full), 1):
    print(f"Fold {fold}")

    # Split into training and validation sets
    X_train, X_val = X_train_full[train_index], X_train_full[val_index]
    y_train, y_val = y_train_full[train_index], y_train_full[val_index]

    # Standardize the training and validation data separately
    scaler = StandardScaler()
    X_train_scaled = torch.tensor(scaler.fit_transform(X_train), dtype=torch.float32)
    X_val_scaled = torch.tensor(scaler.transform(X_val), dtype=torch.float32)

    # Create DataLoaders
    train_dataset = TensorDataset(X_train_scaled, y_train)
    val_dataset = TensorDataset(X_val_scaled, y_val)
    train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)
    val_loader = DataLoader(val_dataset, batch_size=128)

    # Initialize model, criterion, and optimizer
    model = NeuralNet(input_dim).to(device)
    criterion = nn.BCELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    # Train the model with early stopping
    model = train_model(model, train_loader, val_loader, criterion, optimizer)

    # Evaluate on validation set
    model.eval()
    with torch.no_grad():
        val_outputs = model(X_val_scaled.to(device)).cpu().squeeze()
        y_val_pred = (val_outputs > 0.5).int()
        print(classification_report(y_val, y_val_pred))
        print("=" * 80)

# Evaluate on the separate test set
print("\nEvaluating on the Test Set...\n")
scaler = StandardScaler()
X_train_scaled_full = torch.tensor(scaler.fit_transform(X_train_full), dtype=torch.float32)
X_test_scaled = torch.tensor(scaler.transform(X_test), dtype=torch.float32)

# Train a final model on the full training set
# Train a final model on the full training set without validation
model = NeuralNet(input_dim).to(device)
criterion = nn.BCELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)
train_dataset_full = TensorDataset(X_train_scaled_full, y_train_full)
train_loader_full = DataLoader(train_dataset_full, batch_size=128, shuffle=True)

model = train_model(model, train_loader_full, None, criterion, optimizer)


# Make predictions on the test set
model.eval()
with torch.no_grad():
    test_outputs = model(X_test_scaled.to(device)).cpu().squeeze()
    y_test_pred = (test_outputs > 0.5).int()

# Print final classification report
print("Final Classification Report (Test Set):")
print(classification_report(y_test, y_test_pred))